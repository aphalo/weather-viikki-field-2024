---
title: "Daylight Dynamics at Viikki"
subtitle: "2. Ultraviolet Radiation, 2020--2023"
author: "Pedro J. Aphalo"
date: 2024-01-17
date-modified: 2024-03-05
format: 
  html:
    embed-resources: true
code-fold: true
code-tools: true
---

# Introduction

This is an analysis of ultraviolet radiation (UVR) data from Viikki,
Helsinki, Finland, from the Summers of years 2019-2023. The measurements are all
taken well above the vegetation and describe sunlight irradiance at the top of
vegetation. Using multiple broadband sensors, calibrated in-situ, it was
possible to separately quantify three wavebands within the UVR: UV-B (280-315
nm), UV-A2 (315-340 nm) and UV-A1 (340-400 nm).

The aim of this analysis is to describe the natural radiation by means of a
four-summers-long climatology of terrestrial UV-B, UV-A2 and UV-A1 photon
irradiances with a temporal resolution of 1 min, providing for the first time
such a high temporal resolution time series for these wavebands expressed on a 
photon basis.

In this paper, we present these data in ways that are especially useful to those
designing experiments to study responses of plants and other organisms to UV-B,
UV-A1 and UV-A2 under controlled environmental conditions. The absolute UV-B,
UV-A2 and UV-A1 irradiances, the photon ratios of each of UV-B, UV-A2 and UV-A1,
relative to PAR and blue light, as well as the duration of the daily UVR
exposure are determinants of responses such as acclimation, tolerance and 
damage. The analysis presented, considers them all, and their variability.

The data have been acquired as 1 min means from measurements every 5 s or 10 s, thus
allowing the computation of quantities integrated over longer periods of time in
addition to their direct use in the characterization of the light environment.
Daily photon fluence rates, or daily light integrals (DLI), of PAR and UV
radiation, their ratios, and their day to day variation, are also important
determinants of plants' and organisms' responses.

At the latitude of Helsinki, the UV-B irradiance is very low outside of the
Spring and Summer period. The analysis is based on data acquired during this
period. During this period, only data for sun elevations of more than 5 degrees
are included. There are multiple reasons for this. When the angle of incidence
is shallow, cosine diffusers of broadband sensors tend to deviate from the ideal
response; small errors in levelling the sensors have a large effect on readings;
and distant buildings and trees can affect the readings of the sensors by
occluding the solar disk. In particular, because deviations from the ideal
cosine response can differ in magnitude and direction between sensors using
diffusers of different designs, ratios between irradiances measured with them
are likely be more prone to errors at very low solar elevations. Furthermore,
when the sun is below 5 degrees above the horizon, UV-B irradiance is extremely
low.

The data set was divided into two subsets based on the contribution of diffuse
radiation to total radiation, so as to describe separately the radiation
environment under conditions when the solar disk is occluded and not occluded.

```{r, message=FALSE}
# clean global environment
rm(list = ls(pattern = "*"))

library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpmisc)
library(ggdensity)
library(ggbeeswarm)
library(patchwork)
library(photobiology)
library(photobiologyInOut)
library(photobiologyWavebands)
theme_set(theme_bw(14) + theme(legend.position = "bottom"))
```


# Modelled clear sky diffuse fraction

It is possible to estimate whether the solar disk is occluded or not by 
comparing the diffuse radiation fraction observed to that expected under clear
sky conditions for the same solar elevation angle. We used the band from 400 nm
to 700 nm, or photosynthetically active radiation, as measured by a special
broad-band sensor (BF4, Delta-T Devices, Burwell, U.K.).

We used the on-line [Quick TUV calculator](https://www.acom.ucar.edu/Models/TUV/Interactive_TUV/), based on the TUV radiation transfer and
atmospheric photochemistry model (), to estimate the direct and diffuse components
of spectral irradiance for different solar elevation angles (zenith angles in
the TUV model) under clear-sky conditions (cloud optical depth = 0). Simulations
were initially done with different levels of aerosols in the atmosphere. A low 
level of aerosols (optical depth = 0.07) was selected for use as a baseline. The
simulation assumed 300 DU for ozone column, although this has little influence
on estimates of PAR, it does affect estimates of UV-B irradiance.

Based on the spectral simulations we computed PAR irradiances and the diffuse 
fraction for each of the different SZAs and fitted interpolation splines 
(@fig-tuv-diff-fr). The spline for PAR was used, as explained below, to compute deviations of
the observed PAR diffuse fractions from the baseline for clear sky. This method
has been previously used (e.g., XXXXX)

@fig-tuv-total shows the total PAR and UV-B photon irradiances simulated for
different solar elevation angles under clear sky conditions. A logarithmic scale
is used for irradiance. The TUV simulation model returns both the direct and
diffuse components, making it possible to compute their relative contributions
to the total irradiances (@fig-tuv-diff-fr).

```{r, message = FALSE, warning = FALSE, results='hide'}
# We read the text files with the Quick TUV output obtained on-line using the
# interactive Quick-TUV calculator using the R for photobiology suite

#  The search pattern can be changed from "low" to "4str" or "tuv-default" the default aerosols from Quick TUV. 
files <- list.files("../TUV-diffuse-direct-SZA/", pattern = "htm$", full.names = TRUE)

SZA.mspct <- source_mspct()

for (f in files) {
  name <- gsub("tuv-|htm", "", basename(f))
  name <- paste("tuv.za.", name, "deg")
  print(name)
  SZA.mspct[[name]] <- read_qtuv_txt(f, ozone.du = 300, label = "Quick TUV simulation, clouds optical depth = 0, aerosol optical depth = 0.07, albedo = 0.1, ground elevation = 0")
}

# three spectra are read from each file

SZA_tot.mspct <- source_mspct()
SZA_diff.mspct <- source_mspct()
SZA_dir.mspct <- source_mspct()
for (n in names(SZA.mspct)) {
  SZA_tot.mspct[[n]] <- 
    SZA.mspct[[n]][ , c("w.length", "s.e.irrad")]
  SZA_diff.mspct[[n]] <- 
    with(SZA.mspct[[n]], source_spct(w.length = w.length, s.e.irrad = s.e.irrad.diff.down))
  SZA_dir.mspct[[n]] <- 
    with(SZA.mspct[[n]], source_spct(w.length = w.length, s.e.irrad = s.e.irrad.dir))
}
```

```{r, echo = FALSE, results='hide'}
# Based on the spectral simulations we compute PAR irradiances and the diffuse 
# fraction for each of the different SZAs.

# q_irrad(SZA.mspct, PAR(), scale.factor = 1e6)
PAR_tot.tb <- q_irrad(SZA_tot.mspct, PAR(), scale.factor = 1e6)
PAR_dir.tb <- q_irrad(SZA_dir.mspct, PAR(), scale.factor = 1e6)
PAR_diff.tb <- q_irrad(SZA_diff.mspct, PAR(), scale.factor = 1e6)
UVB_tot.tb <- q_irrad(SZA_tot.mspct, UVB(), scale.factor = 1e6)
UVB_dir.tb <- q_irrad(SZA_dir.mspct, UVB(), scale.factor = 1e6)
UVB_diff.tb <- q_irrad(SZA_diff.mspct, UVB(), scale.factor = 1e6)
UVA2_tot.tb <- q_irrad(SZA_tot.mspct, UVA2(), scale.factor = 1e6)
UVA2_dir.tb <- q_irrad(SZA_dir.mspct, UVA2(), scale.factor = 1e6)
UVA2_diff.tb <- q_irrad(SZA_diff.mspct, UVA2(), scale.factor = 1e6)
UVA1_tot.tb <- q_irrad(SZA_tot.mspct, UVA1(), scale.factor = 1e6)
UVA1_dir.tb <- q_irrad(SZA_dir.mspct, UVA1(), scale.factor = 1e6)
UVA1_diff.tb <- q_irrad(SZA_diff.mspct, UVA1(), scale.factor = 1e6)

PAR.tb <- 
  data.frame(
    w.band = "PAR",
    SZA = as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    SEA = 90 - as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    total = PAR_tot.tb$`Q_PAR[`,
    direct = PAR_dir.tb$`Q_PAR[`,
    diffuse = PAR_diff.tb$`Q_PAR[`,
    diff_fraction = PAR_diff.tb$`Q_PAR[` / PAR_tot.tb$`Q_PAR[`
  )
# PAR.tb

UVB.tb <- 
  data.frame(
    w.band = "UVB",
    SZA = as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    SEA = 90 - as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    total = UVB_tot.tb$`Q_]UVB.ISO`,
    direct = UVB_dir.tb$`Q_]UVB.ISO`,
    diffuse = UVB_diff.tb$`Q_]UVB.ISO`,
    diff_fraction = UVB_diff.tb$`Q_]UVB.ISO` / UVB_tot.tb$`Q_]UVB.ISO`
  )
# UVB.tb

UVA2.tb <- 
  data.frame(
    w.band = "UVA2",
    SZA = as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    SEA = 90 - as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    total = UVA2_tot.tb$`Q_UVA2.CIE`,
    direct = UVA2_dir.tb$`Q_UVA2.CIE`,
    diffuse = UVA2_diff.tb$`Q_UVA2.CIE`,
    diff_fraction = UVA2_diff.tb$`Q_UVA2.CIE` / UVA2_tot.tb$`Q_UVA2.CIE`
  )
# UVA2.tb

UVA1.tb <- 
  data.frame(
    w.band = "UVA1",
    SZA = as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    SEA = 90 - as.numeric(gsub("tuv.za.|.deg", "", PAR_tot.tb$spct.idx)),
    total = UVA1_tot.tb$`Q_UVA1.CIE`,
    direct = UVA1_dir.tb$`Q_UVA1.CIE`,
    diffuse = UVA1_diff.tb$`Q_UVA1.CIE`,
    diff_fraction = UVA1_diff.tb$`Q_UVA1.CIE` / UVA1_tot.tb$`Q_UVA1.CIE`
  )
# UVA1.tb

TUV.tb <- rbind(PAR.tb, UVB.tb, UVA2.tb, UVA1.tb)
colnames(TUV.tb)
```

```{r}
# We fit a spline obtaining a function that can be used to obtain by interpolation
# estimates of the diffuse PAR fraction for any solar elevation covered by the
# simulations.

clear_sky_PAR_diff_frac.fun <- splinefun(PAR.tb$SEA, PAR.tb$diff_fraction)
clear_sky_UVB_diff_frac.fun <- splinefun(UVB.tb$SEA, UVB.tb$diff_fraction)
clear_sky_UVA2_diff_frac.fun <- splinefun(UVA2.tb$SEA, UVA2.tb$diff_fraction)
clear_sky_UVA1_diff_frac.fun <- splinefun(UVA1.tb$SEA, UVA1.tb$diff_fraction)

clear_sky_PAR_total.fun <- splinefun(PAR.tb$SEA, PAR.tb$total)
clear_sky_UVB_total.fun <- splinefun(UVB.tb$SEA, UVB.tb$total)
clear_sky_UVA2_total.fun <- splinefun(UVA2.tb$SEA, UVA2.tb$total)
clear_sky_UVA1_total.fun <- splinefun(UVA1.tb$SEA, UVA1.tb$total)

```

```{r}
#| label: fig-tuv-total
#| echo: false
#| fig-cap: "Simulated PAR and UVB total photon irradiances as a function of solar elevation angle. Computed with the Quick TUV calculator for clear sky conditions.  Points are values obtained by running the TUV model, and the black lines are interpolation splines."
ggplot(subset(TUV.tb, SEA > -3), aes(SEA, total, color = w.band)) +
  stat_function(fun = clear_sky_PAR_total.fun, xlim = c(-3, 90), colour = "black") +
  stat_function(fun = clear_sky_UVB_total.fun, xlim = c(-3, 90), colour = "black") +
  stat_function(fun = clear_sky_UVA2_total.fun, xlim = c(-3, 90), colour = "black") +
  stat_function(fun = clear_sky_UVA1_total.fun, xlim = c(-3, 90), colour = "black") +
  geom_point(na.rm = TRUE) +
  scale_y_log10(name = expression("Photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
                labels = label_log(), breaks = 10^c(-3:3)) +
  scale_x_continuous(name = "Solar elevation angle (degrees)",
                     breaks = c(-10, 0, 15, 30, 45, 60, 75, 90)) +
  scale_color_manual(name = "Waveband  ", 
                     values = c(UVB = "violet", UVA2 = "purple", UVA1 = 'blue3', PAR = "orange"))
```

Under clear sky conditions, the contribution of diffuse (= scattered) irradiance
($Q_s$) to total irradiance ($Q_t$), both measured on a horizontal plane,
depends mainly on solar elevation. The proportion of diffuse radiation increases most
steeply at low elevation angles (@fig-tuv-diff-fr) in part as a result of the 
shallow angle of incidence of direct radiation on the horizontal plane on which 
photon irradiance is measured. 

Solar UV-B radiation is more diffuse under clear sky condition compared to PAR.
In our simulated data, with the sun at the zenith, only 50% of the total UV-B photon irradiance arrives to the ground directly from the sun, compared to 88% of PAR (@fig-tuv-diff-fr). The difference in scattering is much smaller between the UV-B and UV-A2 bands than between the UV-A2 and UV-A1 bands.

```{r}
#| label: fig-tuv-diff-fr
#| echo: false
#| fig-cap: "Contribution of diffuse fraction to the total PAR, UV-B, UV-A2 and UV-A1 photon irradiances  plotted as a function of solar elevation angle. Computed with the Quick TUV calculator for clear sky conditions. Points are values obtained by running the TUV model, and the black lines are interpolation splines."

ggplot(TUV.tb, aes(SEA, diff_fraction, color = w.band)) +
  stat_function(fun = clear_sky_PAR_diff_frac.fun, xlim = c(-10, 90), colour = "black") +
  stat_function(fun = clear_sky_UVB_diff_frac.fun, xlim = c(-10, 90), colour = "black") +
  stat_function(fun = clear_sky_UVA2_diff_frac.fun, xlim = c(-10, 90), colour = "black") +
  stat_function(fun = clear_sky_UVA1_diff_frac.fun, xlim = c(-10, 90), colour = "black") +
  geom_point(na.rm = TRUE) +
  scale_x_continuous(name = "Solar elevation angle (degrees)",
                     breaks = c(-10, 0, 15, 30, 45, 60, 75, 90)) +
  labs(y = expression("Diffuse fraction, "*Q[s] / Q[t])) +
  scale_color_manual(name = "Waveband  ", 
                     values = c(UVB = "violet", UVA2 = "purple", UVA1 = 'blue3', PAR = "orange")) +
  expand_limits(y = 0)
```

# Data as logged at 1 min frequency

The whole data set of observations at Viikki, Helsinki, Finland, starting from
2016, is available on-line (Aphalo2024). The observations, logged once per
minute, are means of data acquired once very 5 s or 10 s. Measurements of
ultraviolet radiation started in late 2019. Data from 2020, 2021, 2022 and 2023,
from 1 April until 30 October are reported here. Data for days with fewer than
1410 time points of logged data (more than 30 min of missing data) were
excluded. For each day for which data were retained, individual logged values
marked as not available were kept and the missingness propagated to derived
values such as hourly means, i.e., a single logged 1-minute mean marked as
missing, resulted in missing summaries for the affected day or hour and
variable. However, when presenting results based on 1-min means, only the
affected values were omitted.

The data reflect variation inherent to the light environment superimposed with
weaker or infrequent measurement noise. For example, some birds occasionally use
the sensors as perches. With a big data set like this, occasional disturbances
are unlikely to affect the overall trends, but, on the other hand extreme
outlier values from a set of hundreds of thousands of means, are most likely the
result of disturbances rather than true extreme conditions in the environment.
This is almost sure when the outliers are isolated in time or clustered for a
few consecutive minutes. Gross disturbances can be also detected by comparing
the simultaneous readings from different radiation sensors. Because of this,
when presenting empirical probability density functions we use quantiles
corresponding to 50%, 85% and 85%. The 50% quantile is equivalent to the box in 
a boxplot, containing the central half of the data, and 95% hides 5% of
observations, those with most extreme values, the smallest 2.5% and largest 
2.5%.

When the sun is 5 degrees above the horizon, UV-B irradiance is close to
$0.01\,\mu mol\,m^{-2}\,s^{-1}$ (@fig-tuv-total), and, thus, extremely difficult
to measure reliably. Data for solar elevation angles below 5 degree were
excluded from the analysis and figures, because of the measurement
uncertainties.

As described above, comparison of the observed PAR diffuse fraction to the
baseline obtained from model simulations for the same solar elevation angle, was
the basis for computing a relative enhancement of the PAR diffuse fraction compared
to the baseline.

```{r, results='hide', message=FALSE}
load("../data-rda/minute_2015_2023.tb.rda")

nrow(minute_2015_2023.tb)
range(minute_2015_2023.tb$time)

minute_2015_2023.tb |>
  subset(month_of_year >= 4 & month_of_year <= 10 & calendar_year >= 2020) ->
  minutes_target_months.tb
nrow(minutes_target_months.tb)

# discard days with more than 30 min of missing data
minutes_target_months.tb |>
  group_by(day_of_year, month_of_year, calendar_year) |>
  summarise(n = n(),
            incomplete = (n < 23.5 * 60)) |>
  ungroup() -> bad_days.tb

full_join(minutes_target_months.tb, bad_days.tb) |>
  filter(!incomplete) |>
  select(-incomplete) -> minutes_target_months.tb
nrow(minutes_target_months.tb)

# minute step plots we discard missing observations
minutes_target_months.tb |>
  filter(sun_elevation >= 5) -> minutes_daytime.tb
nrow(minutes_daytime.tb) 

minutes_daytime.tb |>
  filter(PAR_umol_BF < 2500 &
         sun_elevation >= 5) |>
  mutate(PAR_diff_fr_rel = (1 - PAR_diff_fr) / (1 - clear_sky_PAR_diff_frac.fun(sun_elevation)),
         PAR_scattering = 
           factor(ifelse(PAR_diff_fr_rel < 0.4, "Cloudy + overcast", "Clear + broken clouds")),
         UVB_PAR_BF = UVB_umol / PAR_umol_BF,
         UVA2_PAR_BF = UVA2_umol / PAR_umol_BF,
         UVA1_PAR_BF = UVA1_umol / PAR_umol_BF,
         month_name = factor(month_name, 
                             levels = rev(levels(month_name)))) |>
  subset(UVB_PAR_BF < 1e-2) -> minutes.df

nrow(minutes.df)
range(minutes.df$time)

```

## Photosynthetically active radiation

To decide on a suitable cut-off value to separate the data into two sets based
on the the occlusion of the solar disk we plotted the 2-dimensiional (2D)
empirical probability density of observations on the same plot as the spline for
PAR from @fig_tuv_diff_fr and a line describing fully diffuse radiation
(@fig-obs-PAR-diff-fr). In the main plot the actual diffuse fraction is plotted
against solar elevation angle. In the inset, the 1D probability density function
of the relative enhancement of the observed PAR diffuse fraction is plotted.

The distribution of the observed scattering, expressed relative to the baseline
for clear sky, presented in the inset of @fig-diffuse-par-density has two
distinct peaks, a narrow one centred on 1/1 and another, wider peak centred just
to the right of 0/1 . The maximum possible value is 1/1, but the readings from
the sensor are subject to errors leading to dispersion of observed values. In
any case, values close to 1/1 indicate that the solar disk was occluded and very
little, if any, direct PAR was present. The broader peak close to the baseline,
depends, in addition to sensor errors, on variation in the aerosol column and
the effect of clouds not occluding the solar disk. The 0/1 value is affected by
the difference between aerosol depth used to compute the baseline and the actual
depth at the time when observations were logged, in addition to measurement
errors, resulting in a broader peak, extending into negative values (most likely
conditions with less aerosols than used to compute the baseline). The deepest
point in the broad valley between the two peaks is located near a relative
enhancement of the diffuse fraction of 0.6. This valley can be attributed to the
low frequency of observations under partial occlusion of the solar disk. Based
on these results, we chose 0.6 as the cut-off to divide the data into two
subsets, labelled _Clear + broken clouds_ and _Cloudy + overcast_ when
presenting the results. The cut-off is indicated in @fig-diffuse-par-density by
the red dashed lines, and it's value is similar to that used in earlier studies
(e.g., XXXXXXX).

```{r}
#| label: fig-obs-PAR-diff-fr
#| echo: false
#| fig-cap: "Contribution of diffuse PAR to total PAR photon irradiance as a function of solar elevation angle. The lower yellow dashed line is the baseline from model simulations (@fig-tuv-diff-fr) and the upper line depicts the maximum possible value of a relative fraction. The shading described the 2D empirical probabilty density of the observed data pooled over seven months and four years. Inset: 1D probability density plot of the same observations after being re-expressed as a relative enhancement, with zero representing no difference from the clear sky baseline estimate and one representing the abscence of direct PAR, i.e., fully occluded solar disk. Data from years 2019 to 2023, 1 April to 30 October."
#| fig-width: 8
#| fig-asp: 0.8

p.inset <-
  ggplot(minutes.df, aes(1 - PAR_diff_fr_rel)) +
  geom_vline(xintercept = 0.6, linetype = "dashed", color = "red", linewidth = 0.7) +
  annotate(geom = "text",
           x = c(0.5, 0.7), y = 2.5, size = 2.7,
           hjust = 0.5, vjust = 0.5, angle = 90, color = "red",
           label = c("Clear + broken clouds", "Cloudy + overcast")) +
  stat_density(alpha = 0.4, na.rm = TRUE) +
  scale_x_continuous(name = "Relative scattering enhancement", 
                     breaks = c(0, 0.6, 1)) +
  scale_y_continuous(name = "Probability density") +
  coord_cartesian(xlim = c(-0.4, NA)) +
  theme_classic(9)

SAE.max <- max(minutes.df$sun_elevation)

kde_probs <- c(0.95, 0.85, 0.5)
minutes.df %>%
  select(sun_elevation, PAR_diff_fr) %>%
  ggplot(aes(sun_elevation, PAR_diff_fr)) +
  annotate(geom = "plot", label = p.inset, y = 0.6, x = 95, 
           hjust = "inward", vjust = 0.5, vp.width = 0.4, vp.height = 0.5) +
  stat_panel_counts(na.rm = TRUE, label.x = "left", size = 2.7) +
#  geom_vline(xintercept = c(5, SAE.max), linetype = "dotted") +
#  geom_hline(yintercept = 0.12, linetype = "dotted") +
  geom_hdr(probs = kde_probs, na.rm = TRUE) +
  geom_line(data = subset(PAR.tb, SEA < 60 & SEA > 0), aes(SEA, diff_fraction), 
            linetype = "dashed", linewidth = 0.7, color = "orange") +
  geom_line(data = subset(PAR.tb, SEA < 60 & SEA > 0), aes(SEA, 1 - (1 - diff_fraction) * 0.4),  
            linetype = "dashed", linewidth = 0.7, color = "red") +
  annotate(geom = "line", y = 1, x = c(0, 55),
             linetype = "dashed", linewidth = 0.7, color = "orange") +
  annotate(geom = "text",
           x = 45, y = c(0.50, 0.80), 
           hjust = 0.5, vjust = 0.5, color = "red", size = 3,
           label = c("Clear + broken clouds", "Cloudy + overcast")) +
#  geom_x_margin_arrow(xintercept = SAE.max)  +
  scale_x_continuous(name = "Sun elevation angle (degrees)",
                     breaks = c(-10, 0, 15, 30, 45, 60, 75, 90)) +
  scale_y_continuous(name = "PAR diffuse fraction (/1)",
                     breaks = c(0, 0.25, 0.5, 0.75, 1.0)) +
  expand_limits(y = c(0, 1.15)) +
  labs(alpha = "Probability density") -> par_diff_fr_sun_elev_loess.fig
par_diff_fr_sun_elev_loess.fig
```



```{r, results='hide'}
#| label: fig-diffuse-par-density
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probability density plot of the diffuse PAR photon fraction re-expressed as a relative enhancement, with zero representing no difference from the clear sky baseline estimate and one representing the abscence of direct PAR, i.e., fully occluded solar disk. Data from years 2019 to 2023, 1 April to 30 October."

ggplot(minutes.df, aes(1 - PAR_diff_fr_rel)) +
  geom_vline(xintercept = 0.6, linetype = "dashed", color = "red", linewidth = 0.7) +
  annotate(geom = "text",
           x = c(0.55, 0.65), y = 4.48, 
           hjust = 1, vjust = 0.5, angle = 90, color = "red",
           label = c("Clear + broken clouds", "Cloudy + overcast")) +
  stat_density(alpha = 0.4, na.rm = TRUE) +
  stat_panel_counts(label.x = "left", size = 2.7, na.rm = TRUE) +
  scale_x_continuous(name = "Degree of scattering, relative to range", 
                     breaks = c(0, 0.6, 1)) +
  scale_y_continuous(name = "Empirical probability density") +
  expand_limits(x = 0:1) +
  coord_cartesian(xlim = c(-0.4, NA))
```


```{r}
#| label: fig-diffuse-par-SEA-pooled
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the observed relationship between PAR photon irradiance and solar elevation angle pooled over seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(sun_elevation, PAR_umol_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, PAR_umol_BF * 1e-3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.1, x = c(-5, 60)) +
  labs(y = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


## High temporal resolution UV-B photon irradiance

```{r}
#| label: fig-diffuse-uvb-SEA-pooled
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the observed relationship between UV-B photon irradiance and solar elevation angle in each of seven months, under two different cloud cover conditions, as well as jointly. Data from years 2019 to 2023, 1 April to 30 October."

minutes.df |>
  select(sun_elevation, UVB_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVB_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-B photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```



```{r}
#| label: fig-diffuse-uvbpar-SEA-pooled
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the relationship between the observed UV-B:PAR photon ration and solar elevation angle pooled over seven months, under two different cloud cover conditions, as well as jointly. Data from years 2019 to 2023, 1 April to 30 October."

minutes.df |>
  select(sun_elevation, UVB_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVB_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-B:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```

```{r, warning=FALSE}
minutes.df %>%
  select(sun_elevation, PAR_scattering, UVB_PAR_BF) %>%
  na.omit() %>%
  ggplot(aes(sun_elevation, UVB_PAR_BF * 1e3)) +
  geom_vline(xintercept = 0, linetype = "dotted") +
#  stat_hdr(probs = kde_probs) +
#  geom_smooth(na.rm = TRUE) +
#  geom_hline(yintercept = 1.16,  linetype = "dashed", color = "red") +
  stat_quant_band(formula = y ~ poly(x, 3), 
                  alpha = 0.2,
                  quantiles = c(0.025, 0.5, 0.975),
                  method.args = list(method = "fn")) +
  stat_quant_band(formula = y ~ poly(x, 3), 
                  method.args = list(method = "fn")) +
  labs(x = "Solar elevation angle (degrees)",
       y = expression("UV-B:PAR, photon ratio "*(10^{-3}))) +
  stat_quadrant_counts(quadrants = 0L, 
                       label.x = 0.9, 
                       label.y = 0.05) +
  scale_y_continuous(breaks = c(0, 1.0, 2.0, 3.0, 4), limits = c(0, 10)) +
  coord_cartesian(ylim = c(0, 3)) +
  scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90)) +
  expand_limits(x = c(-7.5, 90)) -> viikki_uvbpar_sun_elev_quant.fig
# + facet_grid(rows = vars(PAR_scattering))
viikki_uvbpar_sun_elev_quant.fig
```


```{r}
#| label: fig-diffuse-uvb-par-pooled
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the observed relationship between UV-B photon irradiance and PAR photon irradiance pooled over seven months (April to October), under two different cloud cover conditions, as well as jointly. Data from years 2019 to 2023, 1 April to 30 October."

minutes.df |>
  select(PAR_umol_BF, UVB_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVB_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-0.1, 2)) +
  labs(y = expression("UV-B photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


```{r}
#| label: fig-diffuse-uvb-par-pooled-2
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the observed relationship between UV-B photon irradiance and PAR photon irradiance pooled over seven months (April to October), under two different cloud cover conditions, as well as jointly. Data from years 2019 to 2023, 1 April to 30 October."

minutes.df |>
  select(PAR_umol_BF, UVB_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF, UVB_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.8) +
  expand_limits(y = 1e-6, x = c(1e-3, 2)) +
  scale_y_log10(breaks= c(3,1,0.3,0.1,0.03,0.01, 0.003, 0.001, 0.0003)) +
  scale_x_log10(breaks = c(3000, 1000, 300, 100, 30, 10, 3, 1)) +
  labs(y = expression("UV-B photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mu*mol~m^{-2}~s^{-1}))) +
  coord_cartesian(xlim = c(10, 2000), ylim = c(0.01, 5)) +
  facet_grid(cols = vars(PAR_scattering)) +
  theme(panel.grid.minor = element_blank())
```



```{r}
#| label: fig-diffuse-uvbpar-par-pooled
#| echo: false
#| fig-width: 7
#| fig-asp: 0.7
#| fig-cap: "Probabilty density function summarizing the relationship between the observed UV-B:PAR photon ratio and photon irradiance pooled over seven months, under two different cloud cover conditions, as well as jointly. Data from years 2019 to 2023, 1 April to 30 October."

minutes.df |>
  select(PAR_umol_BF, UVB_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVB_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-B:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


## High temporal resolution UV-A2 photon irradiance


```{r, fig.asp=0.7}
minutes.df |>
  select(sun_elevation, UVA2_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA2_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-A2 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


```{r, fig.asp=0.7}
minutes.df |>
  select(PAR_umol_BF, UVA2_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA2_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-A2 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


```{r, fig.asp=0.7}
minutes.df |>
  select(sun_elevation, UVA2_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA2_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-A2:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


```{r, fig.asp=0.7}
minutes.df |>
  select(PAR_umol_BF, UVA2_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA2_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "right", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-A2:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```



## High temporal resolution UV-A1 photon irradiance


```{r, fig.asp=0.7}
minutes.df |>
  select(sun_elevation, UVA1_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA1_umol)) +
  geom_hdr() +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = c(-5, 60)) +
  labs(y = expression("UV-A1 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```

```{r, fig.asp=0.7}
minutes.df |>
  select(PAR_umol_BF, UVA1_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA1_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = -0.1) +
  labs(y = expression("UV-A1 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```



```{r, fig.asp=0.7}
minutes.df |>
  select(sun_elevation, UVA1_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA1_PAR_BF * 1e3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = c(-5, 60)) +
  labs(y = expression("UV-A1:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


```{r, fig.asp=0.7}
minutes.df |>
  select(PAR_umol_BF, UVA1_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA1_PAR_BF * 1e3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "right", size = 2.7) +
  expand_limits(y = -5, x = -0.1) +
  labs(y = expression("UV-A1:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering),
             margins = "PAR_scattering")
```


# Whole day summaries

To characterize day-to-day variation, we compute summaries for each day. The accumulated daily irradiances or DLI are computed as well as lengths of time or durations of exposures to UV-B radiation above different irradiance thresholds are computed. We also compute day length using Meuss' algorithms.

**We check for missing logged data, i.e., skipped time points in the logging, and discarded all data for these days with incomplete records, to ensure that the correct daily totals and summaries are computed. Values logged as NA or set to NA during data quality checks are retained but propagate to summaries and totals.**

```{r, results='hide', message=FALSE}
viikki_bio3.geo <- data.frame(lon = 25.01673,
                              lat = 60.2253,
                              address = "BIO3, Viikki")

longest.true.run <- function(x) {
  if (any(x)) {
    rl <- rle(x)
    max(rl$lengths[rl$values])
  } else {
    0
  }
}

minutes.df |>
  group_by(calendar_year, month_of_year, day_of_year) |>
  summarise(time = trunc(time[1], units = "days"),
            PAR.DLI = sum(PAR_umol_BF) * 1e-6 * 60,
            UVA1.DLI = sum(UVA1_umol) * 1e-6 * 60,
            UVA2.DLI = sum(UVA2_umol) * 1e-3 * 60,
            UVB.DLI = sum(UVB_umol) * 1e-3 * 60,
            UVB.5umol.hours = sum(UVB_umol > 0.5) / 60,
            UVB1umol.hours = sum(UVB_umol > 1) / 60,
            UVB2umol.hours = sum(UVB_umol > 2) / 60,
            UVB2.5umol.hours = longest.true.run(UVB_umol > 2.5) / 60,
            UVB.5umol.run.hours = longest.true.run(UVB_umol > 0.5) / 60,
            UVB1umol.run.hours = longest.true.run(UVB_umol > 1) / 60,
            UVB2umol.run.hours = longest.true.run(UVB_umol > 2) / 60,
            UVB2.5umol.run.hours = longest.true.run(UVB_umol > 2.5) / 60,
            n = n()) |>
  ungroup() |>
  mutate(day.length = day_length(time, geocode = viikki_bio3.geo),
         UVB.5umol.time.rel = UVB.5umol.hours / day.length,
         UVB1umol.time.rel = UVB1umol.hours / day.length,
         UVB2umol.time.rel = UVB2umol.hours / day.length,
         UVB2.5umol.time.rel = UVB2.5umol.hours / day.length,
         month = ordered(month_of_year, 
                        levels = 4:10, 
                        labels = month.abb[4:10])) -> daily_UVB.tb
daily_UVB.tb
```
We next reformat the daily summaries from wide to long shaped data frames to facilitate their plotting.

```{r, results='hide'}
daily_UVB.tb |>
  select(day_of_year:calendar_year, month, UVB.5umol.run.hours:UVB2.5umol.run.hours, day.length) |>
  pivot_longer(cols = UVB.5umol.run.hours:UVB2.5umol.run.hours,
               names_to = "Threshold",
               values_to = "Duration",
               names_prefix = "UVB\\.|UVB") |>
  mutate(Threshold = gsub("\\.run\\.hours$", "", Threshold),
         Threshold = gsub("^5", "0.5", Threshold),
         Threshold = gsub("umol", "", Threshold),
         Threshold.units = paste("Q[UV-B]>~\"", 
                                 format(as.numeric(Threshold), digits = 2, nsmall = 1), 
                                 "\"~mu*mol~m^{-2}~s^{-1}", sep = ""),
         Threshold = factor(Threshold),
         Threshold.units = factor(Threshold.units)) -> daily_UVB_run_max_long.tb

levels(daily_UVB_run_max_long.tb$Threshold)
daily_UVB_run_max_long.tb
```

```{r, results='hide'}
daily_UVB.tb |>
  select(day_of_year:calendar_year, month, UVB.5umol.time.rel:UVB2.5umol.time.rel, day.length) |>
  pivot_longer(cols = UVB.5umol.time.rel:UVB2.5umol.time.rel,
               names_to = "Threshold",
               values_to = "Fraction",
               names_prefix = "UVB\\.|UVB") |>
  mutate(Threshold = gsub("\\.time\\.rel$", "", Threshold),
         Threshold = gsub("^5", "0.5", Threshold),
         Threshold = gsub("umol$", "", Threshold),
         Threshold.units = paste("Q[UV-B]>~\"", 
                                 format(as.numeric(Threshold), digits = 2, nsmall = 1), 
                                 "\"~mu*mol~m^{-2}~s^{-1}", sep = ""),
         Threshold = factor(Threshold),
         Threshold.units = factor(Threshold.units)) -> daily_UVB_time_rel_long.tb

levels(daily_UVB_time_rel_long.tb$Threshold)
daily_UVB_time_rel_long.tb
```

```{r, results='hide'}
daily_UVB.tb |>
  select(day_of_year:calendar_year, month, UVB.5umol.hours:UVB2.5umol.hours, day.length) |>
  pivot_longer(cols = UVB.5umol.hours:UVB2.5umol.hours,
               names_to = "Threshold",
               values_to = "Duration",
               names_prefix = "UVB\\.|UVB") |>
  mutate(Threshold = gsub("\\.hours$", "", Threshold),
         Threshold = gsub("^5", "0.5", Threshold),
         Threshold = gsub("umol$", "", Threshold),
         Threshold.units = paste("Q[UV-B]>~\"", 
                                 format(as.numeric(Threshold), digits = 2, nsmall = 1), 
                                 "\"~mu*mol~m^{-2}~s^{-1}", sep = ""),
         Threshold = factor(Threshold),
         Threshold.units = factor(Threshold.units)) -> daily_UVB_hours_long.tb

levels(daily_UVB_hours_long.tb$Threshold)
daily_UVB_hours_long.tb
```


## PAR daily light integrals

The PAR DLI estimates will be used as a reference in this analysis @fig-PAR-DLI. Even when plotted on logarithmic scale the distribution remains skewed with a concentration of high irradiance values and very long tail towards "dark" days. Given the large number of observations, estimates for the mean have narrow 99% confidence intervals, showing month-to-month variation on a smooth arc.

```{r}
#| label: fig-PAR-DLI
#| echo: false
#| fig-width: 7
#| fig-asp: 0.8
#| fig-cap: "Daily Light Integrals (DLI) for PAR. Computed from measurements 1 min means of measurements once every 5 s. Points and error bars are means and 99% confidence intervals for the mean."

PAR.DLI.fig <-
ggplot(daily_UVB.tb, aes(month, PAR.DLI)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  stat_panel_counts() +
  scale_y_log10(breaks = c(1, 2, 5, 10, 20, 50, 100)) +
  expand_limits(y = 100) +
  labs(x = "Month", 
       y = expression("PAR daily light integral  "*(mol~m^{-2}~d^{-1})))
PAR.DLI.fig
```

## UV-B daily light integrals

```{r}
#| label: fig-UVB-DLI
#| echo: false
#| fig-width: 7
#| fig-asp: 1.5
#| fig-cap: "Daily Light Integrals (DLI) for UV-B radiation and its ratio to PAR. Computed from measurements 1 min means of measurements once every 5 s. Points and error bars are means and 99% confidence intervals for the mean."

UVB.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVB.DLI)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  scale_y_log10(breaks = c(1, 2, 5, 10, 20, 50, 100)) +
#  expand_limits(y = 100) +
  labs(x = "Month", 
       y = expression("UV-B daily light integral  "*(mmol~m^{-2}~d^{-1})))

UVB.PAR.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVB.DLI / PAR.DLI)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  expand_limits(y = 0) +
  labs(x = "Month", 
       y = expression("Daily UV-B:PAR photon ratio  "*(mmol~mol^{-1})))

UVB.DLI.fig / UVB.PAR.DLI.fig  + 
  plot_layout(axes = "collect") + 
  plot_annotation(tag_levels = 'a') # &
#  theme(plot.tag.position = "right")
```

## UV-A2 daily light integrals

```{r}
#| label: fig-UVA2-DLI
#| echo: false
#| fig-width: 7
#| fig-asp: 1.5
#| fig-cap: "Daily Light Integrals (DLI) for UV-A2 radiation and its ratio to PAR. Computed from measurements 1 min means of measurements once every 5 s. Points and error bars are means and 99% confidence intervals for the mean."

UVA2.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVA2.DLI * 1e-3)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  scale_y_log10(breaks = c(1, 2, 5, 10, 20, 50, 100) / 100) +
  labs(x = "Month", 
       y = expression("UV-A2 daily light integral  "*(mol~m^{-2}~d^{-1})))

UVA2.PAR.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVA2.DLI / PAR.DLI)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  expand_limits(y = 0) +
  labs(x = "Month", 
       y = expression("Daily UV-A2:PAR photon ratio  "*(mmol~mol^{-1})))

UVA2.DLI.fig / UVA2.PAR.DLI.fig  + 
  plot_layout(axes = "collect") + 
  plot_annotation(tag_levels = 'a') # &
#  theme(plot.tag.position = "right")
```

## UV-A1 daily light integrals


```{r}
#| label: fig-UVA1-DLI
#| echo: false
#| fig-width: 7
#| fig-asp: 1.5
#| fig-cap: "Daily Light Integrals (DLI) for UV-A1 radiation and its ratio to PAR. Computed from measurements 1 min means of measurements once every 5 s. Points and error bars are means and 99% confidence intervals for the mean."

UVA1.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVA1.DLI)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  scale_y_log10(breaks = c(1, 2, 5, 10, 20, 50, 100) / 10) +
  labs(x = "Month", 
       y = expression("UV-A1 daily light integral  "*(mol~m^{-2}~d^{-1})))

UVA1.PAR.DLI.fig <-
  ggplot(daily_UVB.tb, aes(month, UVA1.DLI / PAR.DLI * 1e3)) +
  geom_violin(fill = "grey90") +
  stat_summary(fun.data = "mean_cl_boot", size = 0.3, linewidth = 0.7,
               fun.args = list(conf.int=.99)) +
  expand_limits(y = 0) +
  labs(x = "Month", 
       y = expression("Daily UV-A1:PAR photon ratio  "*(mmol~mol^{-1})))

UVA1.DLI.fig / UVA1.PAR.DLI.fig  + 
  plot_layout(axes = "collect") + 
  plot_annotation(tag_levels = 'a') # &
#  theme(plot.tag.position = "right")
```

# Daily length of exposure over a threshold irradiance 

## Daily duration of UV-B exposure


```{r}
#| label: fig-UVB-hours
#| echo: false
#| fig-width: 7
#| fig-asp: 1
#| fig-cap: "Total time per day with UVB-B photon irradiance higher than different thersholds. Computed from 1 min means of measurements once every 5 s. Red points and error bars are means and 99% confidence intervals for the mean; blue points are medians. The yellow columns show the length of the day."
ggplot(daily_UVB_hours_long.tb, aes(month, Duration)) +
  stat_summary(aes(y = day.length),
               fun = "mean", geom = "col", alpha = 0.5, fill = "wheat") +
  stat_panel_counts() +
  geom_point(alpha = 0.15, position = position_jitter(width = 0.35)) +
  stat_summary(fun = "median", linewidth = 1,
               color = "cornflowerblue") +
  stat_summary(fun.data = "mean_cl_boot", linewidth = 1,
               fun.args = list(conf.int=.99), color = "red") +
  labs(x = "Month", 
       y = "Time with UVB irradiance above threshold (h / d)") +
  facet_wrap(facets = vars(Threshold.units), labeller = label_parsed)
```

```{r}
#| label: fig-UVB-on-photoperiod
#| echo: false
#| fig-width: 7
#| fig-asp: 1
#| fig-cap: "Fraction of the photoperiod with UV-B photon irradiance higher than different thersholds. Computed from 1 min means of measurements once every 5 s. Red points and error bars are means and 99% confidence intervals for the mean; blue points are medians."
ggplot(daily_UVB_time_rel_long.tb, aes(month, Fraction)) +
  geom_hline(yintercept = 1, color = "wheat", linewidth = 1) +
  stat_panel_counts() +
  geom_point(alpha = 0.15, position = position_jitter(width = 0.35)) +
  stat_summary(fun = "median", linewidth = 1,
               color = "cornflowerblue") +
  stat_summary(fun.data = "mean_cl_boot", linewidth = 1,
               fun.args = list(conf.int=.99), color = "red") +
  expand_limits(y = 0.65) +
  labs(x = "Month", 
       y = "Fraction of the photoperiod with UVB irradiance above threshold (h / h)") +
  facet_wrap(facets = vars(Threshold.units), labeller = label_parsed)
```

## Daily duration of uninterrupted UV-B exposure

```{r}
#| label: fig-UVB-run-hours
#| echo: false
#| fig-width: 7
#| fig-asp: 1
#| fig-cap: "Maximum duration of uninterrupted UVB-B photon irradiance higher than different thersholds. Computed from 1 min means of measurements once every 5 s. Red points and error bars are means and 99% confidence intervals for the mean; blue points are medians. The yellow columns show the length of the day."
ggplot(daily_UVB_run_max_long.tb, aes(month, Duration)) +
  stat_summary(aes(y = day.length),
               fun = "mean", geom = "col", alpha = 0.5, fill = "wheat") +
  stat_panel_counts() +
  geom_point(alpha = 0.15, position = position_jitter(width = 0.35)) +
  stat_summary(fun = "median", linewidth = 1,
               color = "cornflowerblue") +
  stat_summary(fun.data = "mean_cl_boot", linewidth = 1,
               fun.args = list(conf.int=.99), color = "red") +
  labs(x = "Month", 
       y = "Maximum duration of UV-B irradiance > threshold (h)") +
  facet_wrap(facets = vars(Threshold.units), labeller = label_parsed)
```

```{r}
#| label: fig-UVB-days
#| echo: false
#| fig-width: 7
#| fig-asp: 1
#| fig-cap: "Maximum duration of uninterrupted UVB-B photon irradiance higher than different thersholds. Computed from 1 min means of measurements once every 5 s. Red points and error bars are means and 99% confidence intervals for the mean."
ggplot(daily_UVB_run_max_long.tb, aes(month, Duration)) +
  geom_hline(yintercept = 1, color = "wheat", linewidth = 1) +
  stat_panel_counts() +  
  stat_summary(aes(group = calendar_year), 
               geom = "point",
               fun = function(x) {sum(x > 1) / length(x)}, alpha = 0.33,
               position = position_jitter(width = 0.1, height = 0), size = 2) +
  stat_summary(fun = function(x) {sum(x > 1) / length(x)}, alpha = 0.66, color = "red") +
  labs(x = "Month", 
       y = "Days with > 1 h with UV-B irradiance > threshold (fraction)") +
  facet_wrap(facets = vars(Threshold.units), labeller = label_parsed)
```

# APPENDIX

## Data as logged at 1 min frequency

In this appendix the same data are presented by month of the year.

### Photosynthetically active radiation


```{r}
#| label: fig-diffuse-par-SEA
#| echo: false
#| fig-width: 7
#| fig-asp: 2
#| fig-cap: "Probabilty density function summarizing the observed relationship between PAR photon irradiance and solar elevation angle in each of seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(sun_elevation, PAR_umol_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, PAR_umol_BF * 1e-3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.1, x = c(-5, 60)) +
  labs(y = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```

### High temporal resolution UV-B photon irradiance

```{r}
#| label: fig-diffuse-uvb-SEA
#| echo: false
#| fig-width: 7
#| fig-asp: 2
#| fig-cap: "Probabilty density function summarizing the observed relationship between UV-B photon irradiance and solar elevation angle in each of seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(sun_elevation, UVB_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVB_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-B photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r}
#| label: fig-diffuse-uvb-par
#| echo: false
#| fig-width: 7
#| fig-asp: 2
#| fig-cap: "Probabilty density function summarizing the observed relationship between UV-B photon irradiance and PAR photon irradiance in each of seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(PAR_umol_BF, UVB_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVB_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-0.1, 2)) +
  labs(y = expression("UV-B photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r}
#| label: fig-diffuse-uvbpar-SEA
#| echo: false
#| fig-width: 7
#| fig-asp: 2
#| fig-cap: "Probabilty density function summarizing the relationship between the observed UV-B:PAR photon ration and solar elevation angle in each of seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(sun_elevation, UVB_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVB_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-B:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r}
#| label: fig-diffuse-uvbpar-par
#| echo: false
#| fig-width: 7
#| fig-asp: 2
#| fig-cap: "Probabilty density function summarizing the relationship between the observed UV-B:PAR photon ratio and photon irradiance in each of seven months, under two different cloud cover conditions, as well as jointly."

minutes.df |>
  select(PAR_umol_BF, UVB_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVB_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-B:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


### High temporal resolution UV-A2 photon irradiance

```{r, fig.asp=2}
minutes.df |>
  select(sun_elevation, UVA2_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA2_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-A2:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r, fig.asp=2}
minutes.df |>
  select(PAR_umol_BF, UVA2_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA2_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-A2 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r, fig.asp=2}
minutes.df |>
  select(sun_elevation, UVA2_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA2_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -0.2, x = c(-5, 60)) +
  labs(y = expression("UV-A2 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r, fig.asp=2}
minutes.df |>
  select(PAR_umol_BF, UVA2_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA2_PAR_BF * 1000)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "right", size = 2.7) +
  expand_limits(y = -0.2, x = -0.1) +
  labs(y = expression("UV-A2:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


### High temporal resolution UV-A1 photon irradiance

```{r, fig.asp=2}
minutes.df |>
  select(sun_elevation, UVA1_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA1_umol)) +
  geom_hdr() +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = c(-5, 60)) +
  labs(y = expression("UV-A1 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


```{r, fig.asp=2}
minutes.df |>
  select(PAR_umol_BF, UVA1_umol, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA1_umol)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = -0.1) +
  labs(y = expression("UV-A1 photon irradiance  "*(mu*mol~m^{-2}~s^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```



```{r, fig.asp=2}
minutes.df |>
  select(sun_elevation, UVA1_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(sun_elevation, UVA1_PAR_BF * 1e3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "left", size = 2.7) +
  expand_limits(y = -5, x = c(-5, 60)) +
  labs(y = expression("UV-A1:PAR photon ratio  "*(mmol~mol^{-1})),
       x = "Solar elevation angle (degrees)") +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```



```{r, fig.asp=2}
minutes.df |>
  select(PAR_umol_BF, UVA1_PAR_BF, PAR_scattering, month_name) |>
  na.omit() |>
  ggplot(aes(PAR_umol_BF * 1e-3, UVA1_PAR_BF * 1e3)) +
  geom_hdr(probs = kde_probs) +
  stat_panel_counts(label.x = "right", size = 2.7) +
  expand_limits(y = -5, x = -0.1) +
  labs(y = expression("UV-A1:PAR photon ratio  "*(mmol~mol^{-1})),
       x = expression("PAR photon irradiance  "*(mmol~m^{-2}~s^{-1}))) +
  facet_grid(cols = vars(PAR_scattering), rows = vars(month_name),
             margins = "PAR_scattering")
```


## Sensor calibrations

## PDF

```{r}
pdf("ratios-elev.pdf", width = 7, height = 3.5)
print(viikki_uvbpar_sun_elev_quant.fig)
dev.off()
```
